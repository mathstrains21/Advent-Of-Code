from typing import IO


# This function contains code generated by Chat GPT
def p_1(input_file: IO,
        debug=False): # pylint: disable=unused-argument
    data = input_file.read().split("\n\n")
    nums = [int(num) for num in data[0].split(",")]
    boards = data[1:]

    lowest_rounds = -1
    score = 0
    for board in boards:
        board_nums = [int(num) for num in board.split()]
        rows = [board_nums[0:5], board_nums[5:10], board_nums[10:15], board_nums[15:20], board_nums[20:25]]
        columns = [board_nums[0::5], board_nums[1::5], board_nums[2::5], board_nums[3::5], board_nums[4::5]]
        rows, columns = [set(row) for row in rows], [set(column) for column in columns]

        rounds = 0
        for num in nums:
            rows = [row.difference({num}) for row in rows]
            columns = [column.difference({num}) for column in columns]

            bingo = False
            for row in rows:
                if len(row) == 0:
                    bingo = True
            for column in columns:
                if len(column) == 0:
                    bingo = True
            
            if bingo and (rounds < lowest_rounds or lowest_rounds == -1):
                total = 0
                for row in rows:
                    total += sum(row)
                score = total * num
                lowest_rounds = rounds
                break
                
            rounds += 1
    return score


# This function has been generated using copilot and Chat GPT
def p_2(input_file: IO,
        debug=False): # pylint: disable=unused-argument
    data = input_file.read().split("\n\n")
    nums = [int(num) for num in data[0].split(",")]
    boards = data[1:]

    highest_rounds = -1
    score = 0
    for board in boards:
        board_nums = [int(num) for num in board.split()]
        rows = [board_nums[0:5], board_nums[5:10], board_nums[10:15], board_nums[15:20], board_nums[20:25]]
        columns = [board_nums[0::5], board_nums[1::5], board_nums[2::5], board_nums[3::5], board_nums[4::5]]
        rows, columns = [set(row) for row in rows], [set(column) for column in columns]

        rounds = 0
        for num in nums:
            rows = [row.difference({num}) for row in rows]
            columns = [column.difference({num}) for column in columns]

            bingo = False
            for row in rows:
                if len(row) == 0:
                    bingo = True
            for column in columns:
                if len(column) == 0:
                    bingo = True
            
            if bingo and rounds > highest_rounds:
                total = 0
                for row in rows:
                    total += sum(row)
                score = total * num
                highest_rounds = rounds
            if bingo:
                break
                
            rounds += 1
    return score
